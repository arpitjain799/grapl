syntax = "proto3";

package graplinc.grapl.api.graph_mutation.v1beta1;

import "graplinc/common/v1beta1/types.proto";
import "graplinc/grapl/api/graph/v1beta1/types.proto";
import "graplinc/grapl/common/v1beta1/types.proto";

message SetNodePropertyRequest {
  graplinc.common.v1beta1.Uuid tenant_id = 1;
  graplinc.grapl.common.v1beta1.types.Uid uid = 2;
  graplinc.grapl.common.v1beta1.types.NodeType node_type = 3;
  graplinc.grapl.common.v1beta1.types.PropertyName property_name = 4;
  graplinc.grapl.api.graph.v1beta1.NodeProperty property = 5;
}

message SetNodePropertyResponse {
  // Indicates whether or not the update was redundant, and therefor dropped
  bool was_redundant = 1;
}

message CreateEdgeRequest {
  graplinc.grapl.common.v1beta1.types.EdgeName edge_name = 1;
  graplinc.common.v1beta1.Uuid tenant_id = 2;
  graplinc.grapl.common.v1beta1.types.Uid from_uid = 3;
  graplinc.grapl.common.v1beta1.types.Uid to_uid = 4;
  graplinc.grapl.common.v1beta1.types.NodeType source_node_type = 5;
  graplinc.grapl.common.v1beta1.types.NodeType dest_node_type = 6;
}

message CreateEdgeResponse {
  // Indicates whether or not the update was redundant, and therefor dropped
  bool was_redundant = 1;
}

message CreateNodeRequest {
  // The tenant id to create the node under
  graplinc.common.v1beta1.Uuid tenant_id = 1;
  // The type of the node to request
  graplinc.grapl.common.v1beta1.types.NodeType node_type = 2;
}

message CreateNodeResponse {
  // The uid of the newly allocated node
  graplinc.grapl.common.v1beta1.types.Uid uid = 1;
}

service GraphMutationService {
  // Create Node allocates a new node in the graph, returning the uid of the new node.
  rpc CreateNode(CreateNodeRequest) returns (CreateNodeResponse);
  // SetNodeProperty will update the property of the node with the given uid.
  // If the node does not exist it will be created.
  rpc SetNodeProperty(SetNodePropertyRequest) returns (SetNodePropertyResponse);
  // CreateEdge will create an edge with the name edge_name between the nodes
  // that have the given uids. It will also create the reverse edge.
  rpc CreateEdge(CreateEdgeRequest) returns (CreateEdgeResponse);
}
