syntax = "proto3";

package graplinc.grapl.api.plugin_sdk.analyzers.v1beta1;


import "graplinc/common/v1beta1/types.proto";
import "graplinc/grapl/api/graph_query_service/v1beta1/graph_query_service.proto";
import "graplinc/grapl/common/v1beta1/types.proto";


message StringPropertyUpdate {
    graplinc.grapl.common.v1beta1.Uid uid = 1;
    graplinc.grapl.common.v1beta1.PropertyName property_name = 2;
}

message UInt64PropertyUpdate {
    graplinc.grapl.common.v1beta1.Uid uid = 1;
    graplinc.grapl.common.v1beta1.PropertyName property_name = 2;
}

message Int64PropertyUpdate {
    graplinc.grapl.common.v1beta1.Uid uid = 1;
    graplinc.grapl.common.v1beta1.PropertyName property_name = 2;
}

message EdgeUpdate {
    graplinc.grapl.common.v1beta1.Uid src_uid = 1;
    graplinc.grapl.common.v1beta1.Uid dst_uid = 2;
    graplinc.grapl.common.v1beta1.EdgeName src_edge_name = 3;
    graplinc.grapl.common.v1beta1.EdgeName dst_edge_name = 4;

}

message Update {
    oneof inner {
        StringPropertyUpdate string_property_update = 1;
        UInt64PropertyUpdate uint64_property_update = 2;
        Int64PropertyUpdate int64_property_update = 3;
        EdgeUpdate edge_update = 4;
    }
}

message LensRef {
    string lens_namespace = 1;
    string lens_name = 2;
}

message AnalyzerName {
    // Not empty, < 48 characters
    // Ascii only, [a-zA-Z ]+
    string value = 1;
}

message ExecutionHit {
    graplinc.grapl.api.graph_query_service.v1beta1.GraphView graph_view = 1;
    graplinc.grapl.common.v1beta1.Uid root_uid = 2;
    repeated LensRef lens_refs = 3;
    AnalyzerName analyzer_name = 4;
    graplinc.common.v1beta1.Timestamp time_of_match = 5;
    uint64 idempotency_key = 6;
    int32 score = 7;
}

message ExecutionMiss {}

message RunAnalyzerRequest {
    graplinc.common.v1beta1.Uuid tenant_id = 1;
    Update update = 2;
}

message ExecutionResult {
    oneof inner {
        ExecutionHit hit = 1;
        ExecutionMiss miss = 2;
    }
}

message RunAnalyzerResponse {
    ExecutionResult execution_result = 1;
}

service AnalyzerService {
    rpc RunAnalyzer(RunAnalyzerRequest) returns (RunAnalyzerResponse);
}
