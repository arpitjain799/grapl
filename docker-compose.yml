### Port conventions (though there are many, many exceptions)
# 81xx - grapl services (and some `wait-for-it` http servers)
# 82xx - TBD
# 83xx - grapl plugin services, like grapl-aws-plugins
# 84xx - debugger ports (see vsc_debugger.py)

version: "3.8"
volumes:
  dgraph_export:

x-common-variables:
  aws-region: &aws-region
    AWS_DEFAULT_REGION: "us-east-1"  # boto3 prefers this one
    AWS_REGION: "us-east-1"
  dgraph-env: &dgraph-env
    MG_ALPHAS: "dgraph.grapl.test:9080"
  dynamodb-env: &dynamodb-env
    DYNAMODB_ACCESS_KEY_ID: "dummy_cred_aws_access_key_id"
    DYNAMODB_ACCESS_KEY_SECRET: "dummy_cred_aws_secret_access_key"
    DYNAMODB_ENDPOINT: "http://dynamodb.us-east-1.amazonaws.com:8000"
  dynamodb-mapping-tables: &dynamodb-mapping-tables
    ASSET_ID_MAPPINGS: local-grapl-asset_id_mappings
    DYNAMIC_SESSION_TABLE: local-grapl-dynamic_session_table
    FILE_HISTORY_TABLE: local-grapl-file_history_table
    INBOUND_CONNECTION_HISTORY_TABLE: local-grapl-inbound_connection_history_table
    IP_CONNECTION_HISTORY_TABLE: local-grapl-ip_connection_history_table
    NETWORK_CONNECTION_HISTORY_TABLE: local-grapl-network_connection_history_table
    OUTBOUND_CONNECTION_HISTORY_TABLE: local-grapl-outbound_connection_history_table
    PROCESS_HISTORY_TABLE: local-grapl-process_history_table
    STATIC_MAPPING_TABLE: local-grapl-static_mapping_table
  log-level: &log-level
    GRAPL_LOG_LEVEL: "${GRAPL_LOG_LEVEL:-ERROR}"
    RUST_LOG: "${RUST_LOG:-ERROR}"
  s3-env: &s3-env
    S3_ACCESS_KEY_ID: "minioadmin"
    S3_ACCESS_KEY_SECRET: "minioadmin"
    S3_ENDPOINT: "http://s3.us-east-1.amazonaws.com:9000"
  sqs-env: &sqs-env
    SQS_ACCESS_KEY_ID: "dummy_cred_aws_access_key_id"
    SQS_ACCESS_KEY_SECRET: "dummy_cred_aws_secret_access_key"
    SQS_ENDPOINT: "http://sqs.us-east-1.amazonaws.com:9324"

services:

  ########################################################################
  # Cloud Infrastructure Dependencies
  ########################################################################

  dgraph:
    tty: false
    image: dgraph/standalone:v20.07.1
    ports:
      - "5080:5080"  # zero - used for `dgraph live` importing-data command in `integration_tests.rst`
      - "8000:8000"  # ratel
      - "8080:8080"  # alpha http
      - "9080:9080"  # alpha grpc
    logging:
      driver: none
    volumes:
      - type: volume
        source: dgraph_export
        # Hitting :8080/admin/export will force an export to be written to this directory.
        target: /dgraph/export
    networks:
      default:
        aliases:
          - dgraph.grapl.test

  # dev uses 1 big redis instance, prod has 1:1 redis per grapl
  # service... maybe transitory, this will eventually match prod
  redis:
    image: redis:latest
    command: |
      sh -c "
        # hack from https://stackoverflow.com/questions/54533308/disable-redis-persistence-in-docker
        # to disable persistence
        rm -f /data/dump.rdb && redis-server
      "
    ports:
      - "6379:6379" # redis default
    logging:
      driver: none
    networks:
      default:
        aliases:
          - redis.grapl.test

  sqs:
    image: localstack/localstack:0.11.5
    environment:
      - HOSTNAME_EXTERNAL=sqs.us-east-1.amazonaws.com
      - IMAGE_NAME=localstack/localstack:0.11.5
      - SERVICES=sqs:9324
    ports:
      - "9324:9324"
    networks:
      default:
        aliases:
          - sqs.us-east-1.amazonaws.com
    logging:
      driver: none

  secretsmanager:
    image: localstack/localstack:0.11.5
    environment:
      - HOSTNAME_EXTERNAL=secretsmanager.us-east-1.amazonaws.com
      - IMAGE_NAME=localstack/localstack:0.11.5
      - PORT_WEB_UI=8099
      - SERVICES=secretsmanager:4584
    ports:
      - "4584:4584"
      - "8099:8099"
    networks:
      default:
        aliases:
          - secretsmanager.us-east-1.amazonaws.com
    # logging:
    #   driver: none

  s3:
    image: minio/minio
    command: server /data
    environment:
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_REGION_NAME=us-east-1
      - MINIO_SECRET_KEY=minioadmin
    ports:
      - "9000:9000"
    networks:
      default:
        aliases:
          - s3.us-east-1.amazonaws.com
          - s3.amazonaws.com
    logging:
      driver: none

  dynamodb:
    image: amazon/dynamodb-local
    environment:
      - AWS_REGION="us-east-1"
      - REGION="us-east-1"
    logging:
      driver: none
    networks:
      default:
        aliases:
          - dynamodb.us-east-1.amazonaws.com

  ########################################################################
  # Rust Services
  ########################################################################

  grapl-metric-forwarder:
    image: grapl/grapl-metric-forwarder:${TAG:-latest}
    build:
      context: src
      dockerfile: rust/Dockerfile
      target: metric-forwarder-deploy
      args:
        - CARGO_PROFILE=${CARGO_PROFILE:-debug}
    tty: false
    environment:
      IS_LOCAL: "True"
      <<: *log-level

  grapl-sysmon-subgraph-generator:
    image: grapl/grapl-sysmon-subgraph-generator:${TAG:-latest}
    build:
      context: src
      dockerfile: rust/Dockerfile
      target: sysmon-subgraph-generator-deploy
      args:
        - CARGO_PROFILE=${CARGO_PROFILE:-debug}
    tty: false
    environment:
      <<: *aws-region
      DEAD_LETTER_QUEUE_URL: "http://sqs.us-east-1.amazonaws.com:9324/queue/grapl-sysmon-graph-generator-dead-letter-queue"
      DEST_BUCKET_NAME: "local-grapl-unid-subgraphs-generated-bucket"
      DEST_QUEUE_URL: "http://sqs.us-east-1.amazonaws.com:9324/queue/grapl-node-identifier-queue"
      EVENT_CACHE_CLUSTER_ADDRESS: "redis.grapl.test:6379"
      IS_LOCAL: "True"
      <<: *log-level
      RETRY_QUEUE_URL: "http://sqs.us-east-1.amazonaws.com:9324/000000000000/grapl-sysmon-graph-generator-retry-queue"
      <<: *s3-env
      SOURCE_QUEUE_URL: "http://sqs.us-east-1.amazonaws.com:9324/000000000000/grapl-sysmon-graph-generator-queue"
      <<: *sqs-env
    depends_on:
      - grapl-provision
      - redis
      - s3
      - sqs

  grapl-osquery-subgraph-generator:
    image: grapl/grapl-osquery-subgraph-generator:${TAG:-latest}
    build:
      context: src
      dockerfile: rust/Dockerfile
      target: osquery-subgraph-generator-deploy
      args:
        - CARGO_PROFILE=${CARGO_PROFILE:-debug}
    tty: false
    environment:
      <<: *aws-region
      BUCKET_PREFIX: "local-grapl"
      DEAD_LETTER_QUEUE_URL: "http://sqs.us-east-1.amazonaws.com:9324/queue/grapl-osquery-graph-generator-dead-letter-queue"
      DEST_BUCKET_NAME: "local-grapl-unid-subgraphs-generated-bucket"
      DEST_QUEUE_URL: "http://sqs.us-east-1.amazonaws.com:9324/queue/grapl-node-identifier-queue"
      EVENT_CACHE_CLUSTER_ADDRESS: "redis.grapl.test:6379"
      IS_LOCAL: "True"
      <<: *log-level
      RETRY_QUEUE_URL: "http://sqs.us-east-1.amazonaws.com:9324/queue/grapl-osquery-graph-generator-retry-queue"
      <<: *s3-env
      SOURCE_QUEUE_URL: "http://sqs.us-east-1.amazonaws.com:9324/queue/grapl-osquery-graph-generator-queue"
      <<: *sqs-env
    depends_on:
      - grapl-provision
      - redis
      - s3
      - sqs

  grapl-node-identifier:
    image: grapl/grapl-node-identifier:${TAG:-latest}
    build:
      context: src
      dockerfile: rust/Dockerfile
      target: node-identifier-deploy
      args:
        - CARGO_PROFILE=${CARGO_PROFILE:-debug}
    environment:
      <<: *aws-region
      DEAD_LETTER_QUEUE_URL: "http://sqs.us-east-1.amazonaws.com:9324/queue/grapl-node-identifier-dead-letter-queue"
      DEST_BUCKET_NAME: "local-grapl-subgraphs-generated-bucket"
      DEST_QUEUE_URL: "http://sqs.us-east-1.amazonaws.com:9324/queue/grapl-graph-merger-queue"
      <<: *dynamodb-env
      <<: *dynamodb-mapping-tables
      EVENT_CACHE_CLUSTER_ADDRESS: "redis.grapl.test:6379"
      IS_LOCAL: "true"
      <<: *log-level
      RETRY_QUEUE_URL: "http://sqs.us-east-1.amazonaws.com:9324/queue/grapl-node-identifier-retry-queue"
      <<: *s3-env
      SOURCE_QUEUE_URL: "http://sqs.us-east-1.amazonaws.com:9324/queue/grapl-node-identifier-queue"
      <<: *sqs-env
    tty: false
    depends_on:
      - dynamodb
      - grapl-provision
      - redis
      - s3
      - sqs

  grapl-node-identifier-retry-handler:
    image: grapl/grapl-node-identifier-retry-handler:${TAG:-latest}
    build:
      context: src
      dockerfile: rust/Dockerfile
      target: node-identifier-retry-handler-deploy
      args:
        - CARGO_PROFILE=${CARGO_PROFILE:-debug}
    environment:
      <<: *aws-region
      DEAD_LETTER_QUEUE_URL: "http://sqs.us-east-1.amazonaws.com:9324/queue/grapl-node-identifier-dead-letter-queue"
      DEST_BUCKET_NAME: "local-grapl-subgraphs-generated-bucket"
      DEST_QUEUE_URL: "http://sqs.us-east-1.amazonaws.com:9324/queue/grapl-graph-merger-queue"
      <<: *dynamodb-env
      <<: *dynamodb-mapping-tables
      EVENT_CACHE_CLUSTER_ADDRESS: "redis.grapl.dev:6379"
      IS_LOCAL: "True"
      <<: *log-level
      RETRY_QUEUE_URL: "http://sqs.us-east-1.amazonaws.com:9324/queue/grapl-node-identifier-dead-letter-queue"
      <<: *s3-env
      SOURCE_QUEUE_URL: "http://sqs.us-east-1.amazonaws.com:9324/queue/grapl-node-identifier-retry-queue"
      <<: *sqs-env
    tty: false
    depends_on:
      - dynamodb
      - grapl-provision
      - redis
      - s3
      - sqs

  grapl-graph-merger:
    image: grapl/grapl-graph-merger:${TAG:-latest}
    build:
      context: src
      dockerfile: rust/Dockerfile
      target: graph-merger-deploy
      args:
        - CARGO_PROFILE=${CARGO_PROFILE:-debug}
    environment:
      <<: *aws-region
      DEAD_LETTER_QUEUE_URL: "http://sqs.us-east-1.amazonaws.com:9324/queue/grapl-graph-merger-dead-letter-queue"
      DEST_BUCKET_NAME: "local-grapl-subgraphs-merged-bucket"
      DEST_QUEUE_URL: "http://sqs.us-east-1.amazonaws.com:9324/queue/grapl-analyzer-dispatcher-queue"
      <<: *dgraph-env
      <<: *dynamodb-env
      EVENT_CACHE_CLUSTER_ADDRESS: "redis.grapl.dev:6379"
      GRAPL_SCHEMA_TABLE: "local-grapl-grapl_schema_table"
      IS_LOCAL: "True"
      <<: *log-level
      RETRY_QUEUE_URL: "http://sqs.us-east-1.amazonaws.com:9324/queue/grapl-graph-merger-retry-queue"
      <<: *s3-env
      SOURCE_QUEUE_URL: "http://sqs.us-east-1.amazonaws.com:9324/queue/grapl-graph-merger-queue"
      <<: *sqs-env
    tty: false
    depends_on:
      - dgraph
      - dynamodb
      - grapl-provision
      - redis
      - s3
      - sqs

  grapl-analyzer-dispatcher:
    image: grapl/grapl-analyzer-dispatcher:${TAG:-latest}
    build:
      context: src
      dockerfile: rust/Dockerfile
      target: analyzer-dispatcher-deploy
      args:
        - CARGO_PROFILE=${CARGO_PROFILE:-debug}
    environment:
      ANALYZER_BUCKET: "local-grapl-analyzers-bucket"
      ANALYZERS_BUCKET: "local-grapl-analyzers-bucket"
      <<: *aws-region
      DEAD_LETTER_QUEUE_URL: "http://sqs.us-east-1.amazonaws.com:9324/queue/grapl-analyzer-dispatcher-dead-letter-queue"
      DEST_BUCKET_NAME: "local-grapl-analyzer-dispatched-bucket"
      DEST_QUEUE_URL: "http://sqs.us-east-1.amazonaws.com:9324/queue/grapl-analyzer-executor-queue"
      IS_LOCAL: "true"
      <<: *log-level
      RETRY_QUEUE_URL: "http://sqs.us-east-1.amazonaws.com:9324/queue/grapl-analyzer-dispatcher-retry-queue"
      <<: *s3-env
      SOURCE_QUEUE_URL: "http://sqs.us-east-1.amazonaws.com:9324/queue/grapl-analyzer-dispatcher-queue"
      <<: *sqs-env
    tty: false
    depends_on:
      - s3
      - sqs

  ########################################################################
  # Python Services
  ########################################################################

  # Removed per https://grapl-internal.slack.com/archives/C017PLQ8TCZ/p1601574470186700
  # Add it back once Analyzer Deployer is ready for prime time!
  # analyzer-deployer:
  #   image: grapl/analyzer-deployer:${TAG:-latest}
  #   command: /bin/sh -c '. venv/bin/activate && cd /home/grapl/app && chalice local --no-autoreload --host=0.0.0.0 --port=8125'
  #   environment:
  #     - "IS_LOCAL=True"
  #     - GRPC_ENABLE_FORK_SUPPORT=1
  #     - "BUCKET_PREFIX=local-grapl"
  #     - GRAPL_LOG_LEVEL=${GRAPL_LOG_LEVEL:-ERROR}
  #   tty: true

  grapl-analyzer-executor:
    image: grapl/grapl-analyzer-executor:${TAG:-latest}
    build:
      context: src
      dockerfile: ./python/Dockerfile
      target: analyzer-executor-deploy
    command: /bin/sh -c '. venv/bin/activate && python3 analyzer_executor/src/run_local.py'
    environment:
      <<: *aws-region
      BUCKET_PREFIX: "local-grapl"
      DEBUG_SERVICES: "${DEBUG_SERVICES}"
      <<: *dgraph-env
      GRPC_ENABLE_FORK_SUPPORT: "1"
      HITCACHE_ADDR: "redis.grapl.test"
      HITCACHE_PORT: "6379"
      IS_LOCAL: "True"
      IS_RETRY: "False"
      <<: *log-level
      MESSAGECACHE_ADDR: "redis.grapl.test"
      MESSAGECACHE_PORT: "6379"
      RETRY_QUEUE_URL: "http://sqs.us-east-1.amazonaws.com:9324/queue/grapl-analyzer-executor-retry-queue"
      <<: *s3-env
      SOURCE_QUEUE_URL: "http://sqs.us-east-1.amazonaws.com:9324/queue/grapl-analyzer-executor-queue"
      <<: *sqs-env
    tty: true
    ports:
      - 8401:8401  # VSC Debugger
    depends_on:
      - dgraph
      - redis
      - s3
      - sqs

  grapl-ux-router:
    image: grapl/grapl-ux-router:${TAG:-latest}
    build:
      context: src
      dockerfile: ./python/Dockerfile
      target: grapl-ux-router-deploy
    command: |
      /bin/sh -c '
        wait-for-it grapl-engagement-view-uploader:8127 --timeout=180 &&
        . venv/bin/activate &&
        cd app &&
        chalice local --no-autoreload --host=0.0.0.0 --port=8901
      '
    ports:
      - "8901:8901"
    environment:
      GRAPL_LOG_LEVEL: "DEBUG"
      IS_LOCAL: "True"
      UX_BUCKET_NAME: "local-grapl-engagement-ux-bucket"
    depends_on:
      - grapl-engagement-view-uploader
    tty: true
    networks:
      default:
        aliases:
          - ux-router.grapl.test

  grapl-engagement-creator:
    image: grapl/grapl-engagement-creator:${TAG:-latest}
    build:
      context: src
      dockerfile: ./python/Dockerfile
      target: engagement-creator-deploy
    command: /bin/sh -c '. venv/bin/activate && python3 engagement-creator/src/engagement-creator.py'
    environment:
      <<: *aws-region
      BUCKET_PREFIX: "local-grapl"
      <<: *dgraph-env
      IS_LOCAL: "True"
      <<: *log-level
      <<: *s3-env
      <<: *sqs-env
    tty: true
    depends_on:
      - dgraph
      - s3
      - sqs

  grapl-engagement-edge:
    image: grapl/grapl-engagement-edge:${TAG:-latest}
    build:
      context: src
      dockerfile: ./python/Dockerfile
      target: engagement-edge-deploy
    command: |
      /bin/sh -c '
        wait-for-it grapl-provision:8126 --timeout=120 &&
        . venv/bin/activate &&
        cd /home/grapl/app &&
        chalice local --no-autoreload --host=0.0.0.0 --port=8900
      '
    ports:
      - "8900:8900"
    networks:
      default:
        aliases:
          - auth.grapl.test
    environment:
      <<: *aws-region
      BUCKET_PREFIX: "local-grapl"
      <<: *dynamodb-env
      IS_LOCAL: "True"
      <<: *log-level
      USER_AUTH_TABLE: "local-grapl-user_auth_table"
      UX_BUCKET_URL: "localhost:3000"
    depends_on:
      - dynamodb
      - grapl-provision
      - secretsmanager
    tty: true

  grapl-model-plugin-deployer:
    image: grapl/grapl-model-plugin-deployer:${TAG:-latest}
    build:
      context: src
      dockerfile: ./python/Dockerfile
      target: model-plugin-deployer-deploy
    command: /bin/sh -c '. venv/bin/activate && cd /home/grapl/app && chalice local --no-autoreload --host=0.0.0.0 --port=8123'
    ports:
      - "8123:8123"
    environment:
      <<: *aws-region
      <<: *dgraph-env
      <<: *dynamodb-env
      IS_LOCAL: "True"
      <<: *log-level
      <<: *s3-env
      UX_BUCKET_URL: "localhost"
    tty: true
    depends_on:
      - dgraph
      - dynamodb
      - s3
      - secretsmanager
    networks:
      default:
        aliases:
          - model-plugin-deployer.grapl.test

  grapl-dgraph-ttl:
    image: grapl/grapl-dgraph-ttl:${TAG:-latest}
    build:
      context: src
      dockerfile: ./python/Dockerfile
      target: dgraph-ttl-deploy
    command: /bin/sh -c '. venv/bin/activate && cd /home/grapl/app && chalice local --no-autoreload --host=0.0.0.0 --port=8124'
    ports:
      - "8124:8124"
    environment:
      <<: *dgraph-env
      GRAPL_DGRAPH_TTL_S: "${GRAPL_DGRAPH_TTL_S:-31536000}"
      GRAPL_TTL_DELETE_BATCH_SIZE: "${GRAPL_TTL_DELETE_BATCH_SIZE:-10}"
      IS_LOCAL: "True"
      <<: *log-level
    tty: true
    depends_on:
      - dgraph

  ########################################################################
  # Web Services
  ########################################################################

  nginx:
    image: nginxinc/nginx-unprivileged
    command: nginx
    volumes:
      - ./etc/local_grapl/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "1234:3128"
    depends_on:
      - grapl-engagement-edge
      - grapl-model-plugin-deployer
      - grapl-graphql-endpoint
      - grapl-ux-router

  grapl-engagement-view-uploader:
    image: grapl/grapl-engagement-view:${TAG:-latest}
    build:
      context: src
      dockerfile: js/engagement_view/Dockerfile
      target: engagement-view-local-deploy
    command: |
      /bin/bash -c "
        wait-for-it grapl-provision:8126 --timeout=120 &&
        ./upload_local.sh &&
        python -m http.server 8127  # wait-for-it
      "
    depends_on:
      - grapl-provision

  grapl-graphql-endpoint:
    image: grapl/grapl-graphql-endpoint:${TAG:-latest}
    build:
      context: src
      dockerfile: js/graphql_endpoint/Dockerfile
      target: graphql-endpoint-deploy
    command: yarn start server
    environment:
      <<: *dgraph-env
      IS_LOCAL: "True"
      JWT_SECRET_ID: "JWT_SECRET_ID"
      PORT: "5000"
    depends_on:
      - dgraph
    ports:
      - 5000:5000
    networks:
      default:
        aliases:
          - graphql.grapl.test

  grapl-notebook:
    image: grapl/grapl-notebook:${TAG:-latest}
    build:
      context: src
      dockerfile: ./python/Dockerfile
      target: grapl-notebook
    user: grapl
    environment:
      <<: *dgraph-env
    depends_on:
      - dgraph
    ports:
      - 8888:8888

  ########################################################################
  # Utility Services
  ########################################################################

  grapl-provision:
    image: grapl/grapl-provision:${TAG:-latest}
    build:
      context: src
      dockerfile: ./python/Dockerfile
      target: grapl-provision
    command: |
      /bin/bash -c "
        export TIMEOUT=35 &&
        # it doesn't seem to like waiting for sqs
        # wait-for-it sqs:9324 &&
        wait-for-it s3:9000 --timeout=$$TIMEOUT &&
        wait-for-it dynamodb:8000 --timeout=$$TIMEOUT &&
        wait-for-it dgraph:8080 --timeout=$$TIMEOUT &&
        wait-for-it secretsmanager:4584 --timeout=$$TIMEOUT &&
        . venv/bin/activate &&
        python /home/grapl/grapl_local_provision/provision_local_identity_table.py &&
        python /home/grapl/grapl_local_provision/grapl_provision.py &&
        # Host a server on this port, so that tests can wait-for-it
        python -m http.server 8126
      "
    environment:
      <<: *aws-region
      <<: *dgraph-env
      <<: *dynamodb-env
      GRAPL_LOG_LEVEL: "${GRAPL_LOG_LEVEL:-INFO}"
      <<: *s3-env
      <<: *sqs-env
    tty: true
    ports:
      - 8126:8126
    depends_on:
      - dgraph
      - dynamodb
      - s3
      - secretsmanager
      - sqs

networks:
  default:
    name: grapl-network
