[1mdiff --git a/src/js/frontend/.gitignore b/src/js/frontend/.gitignore[m
[1mindex 17ba7b7cc..57292e29a 100644[m
[1m--- a/src/js/frontend/.gitignore[m
[1m+++ b/src/js/frontend/.gitignore[m
[36m@@ -48,4 +48,6 @@[m [mbuild-code[m
 .bash_history[m
 .cache/[m
 .node/[m
[31m-[m
[32m+[m[32m/test-results/[m
[32m+[m[32m/playwright-report/[m
[32m+[m[32m/playwright/.cache/[m
[1mdiff --git a/src/js/frontend/Dockerfile b/src/js/frontend/Dockerfile[m
[1mindex f9fe321d7..c82b97882 100644[m
[1m--- a/src/js/frontend/Dockerfile[m
[1m+++ b/src/js/frontend/Dockerfile[m
[36m@@ -34,4 +34,4 @@[m [mRUN yarn install \[m
     && yarn build \[m
     && yarn cache clean[m
 [m
[31m-CMD ["yarn integrationTest --watchAll=false"][m
\ No newline at end of file[m
[32m+[m[32mCMD ["yarn integrationTest"][m
\ No newline at end of file[m
[1mdiff --git a/src/js/frontend/e2e-tests/example.spec.ts b/src/js/frontend/e2e-tests/example.spec.ts[m
[1mindex 16df83868..d32950f1b 100644[m
[1m--- a/src/js/frontend/e2e-tests/example.spec.ts[m
[1m+++ b/src/js/frontend/e2e-tests/example.spec.ts[m
[36m@@ -1,20 +1,29 @@[m
[32m+[m[32m// @ts-check[m
 import { test, expect } from '@playwright/test';[m
 [m
[31m-test('homepage has title and links to intro page', async ({ page }) => {[m
[31m-  await page.goto('https://playwright.dev/');[m
[32m+[m[32mtest('Login Component has title and a form with username and password fields which are filled in with environment variables ' +[m
[32m+[m[32m  'which check to see that we can submit our login form ', async ({ page }) => {[m
[32m+[m[32m  await page.goto('localhost:1234/#/login');[m
 [m
   // Expect a title "to contain" a substring.[m
[31m-  await expect(page).toHaveTitle(/Playwright/);[m
[32m+[m[32m  await expect(page).toHaveTitle(/Grapl/);[m
 [m
[31m-  // create a locator[m
[31m-  const getStarted = page.getByRole('link', { name: 'Get started' });[m
[32m+[m[32m  // create a locators[m
[32m+[m[32m  const submitButton = page.getByRole('button', { name: 'Submit' });[m
[32m+[m[32m  // const testUsername = process.env.GRAPL_TEST_USER_NAME;[m
[32m+[m[32m  // const testPassword = process.env.GRAPL_TEST_PASSWORD;[m
[32m+[m[32m  const testUsername = "local-grapl-grapl-test-user";[m
[32m+[m[32m  const testPassword = "bcf09a4f-c2f7-726c-84bc-b834f62a907f";[m
[32m+[m
[32m+[m
[32m+[m[32m  await page.getByPlaceholder('Username').fill(testUsername);[m
[32m+[m[32m  await page.getByPlaceholder('Password').fill(testPassword);[m
 [m
   // Expect an attribute "to be strictly equal" to the value.[m
[31m-  await expect(getStarted).toHaveAttribute('href', '/docs/intro');[m
 [m
[31m-  // Click the get started link.[m
[31m-  await getStarted.click();[m
[32m+[m[32m  // Click the Submit Button.[m
[32m+[m[32m  await submitButton.click();[m
 [m
   // Expects the URL to contain intro.[m
[31m-  await expect(page).toHaveURL(/.*intro/);[m
[32m+[m[32m  await expect(page).toHaveURL("http://localhost:1234/#/"); // redirects to homepage[m
 });[m
[1mdiff --git a/src/js/frontend/package.json b/src/js/frontend/package.json[m
[1mindex d5b433c56..94c12c64b 100644[m
[1m--- a/src/js/frontend/package.json[m
[1m+++ b/src/js/frontend/package.json[m
[36m@@ -22,7 +22,7 @@[m
   "scripts": {[m
     "start": "react-scripts start",[m
     "build": "react-scripts build",[m
[31m-    "integrationTest": "react-scripts test tests/integration --maxWorkers=1",[m
[32m+[m[32m    "integrationTest": "yarn playwright test",[m
     "unitTest": "react-scripts test tests/unit --maxWorkers=1",[m
     "eject": "react-scripts eject",[m
     "check-types": "tsc --project tsconfig.json --pretty --noEmit",[m
[36m@@ -45,6 +45,7 @@[m
     ][m
   },[m
   "devDependencies": {[m
[32m+[m[32m    "@playwright/test": "^1.27.1",[m
     "@testing-library/dom": "^8.18.1",[m
     "@testing-library/jest-dom": "^5.16.5",[m
     "@testing-library/react": "^13.4.0",[m
[1mdiff --git a/src/js/frontend/playwright.config.ts b/src/js/frontend/playwright.config.ts[m
[1mindex 7f79f55e0..0063cc887 100644[m
[1m--- a/src/js/frontend/playwright.config.ts[m
[1m+++ b/src/js/frontend/playwright.config.ts[m
[36m@@ -36,7 +36,7 @@[m [mconst config: PlaywrightTestConfig = {[m
     /* Maximum time each action such as `click()` can take. Defaults to 0 (no limit). */[m
     actionTimeout: 0,[m
     /* Base URL to use in actions like `await page.goto('/')`. */[m
[31m-    // baseURL: 'http://localhost:3000',[m
[32m+[m[32m    baseURL: process.env.GRAPL_WEB_UI_ENDPOINT_ADDRESS,[m
 [m
     /* Collect trace when retrying the failed test. See https://playwright.dev/docs/trace-viewer */[m
     trace: 'on-first-retry',[m
[1mdiff --git a/src/js/frontend/tests-examples/demo-todo-app.spec.ts b/src/js/frontend/tests-examples/demo-todo-app.spec.ts[m
[1mdeleted file mode 100644[m
[1mindex 54c59ac98..000000000[m
[1m--- a/src/js/frontend/tests-examples/demo-todo-app.spec.ts[m
[1m+++ /dev/null[m
[36m@@ -1,437 +0,0 @@[m
[31m-import { test, expect, type Page } from '@playwright/test';[m
[31m-[m
[31m-test.beforeEach(async ({ page }) => {[m
[31m-  await page.goto('https://demo.playwright.dev/todomvc');[m
[31m-});[m
[31m-[m
[31m-const TODO_ITEMS = [[m
[31m-  'buy some cheese',[m
[31m-  'feed the cat',[m
[31m-  'book a doctors appointment'[m
[31m-];[m
[31m-[m
[31m-test.describe('New Todo', () => {[m
[31m-  test('should allow me to add todo items', async ({ page }) => {[m
[31m-    // create a new todo locator[m
[31m-    const newTodo = page.getByPlaceholder('What needs to be done?');[m
[31m-[m
[31m-    // Create 1st todo.[m
[31m-    await newTodo.fill(TODO_ITEMS[0]);[m
[31m-    await newTodo.press('Enter');[m
[31m-[m
[31m-    // Make sure the list only has one todo item.[m
[31m-    await expect(page.getByTestId('todo-title')).toHaveText([[m
[31m-      TODO_ITEMS[0][m
[31m-    ]);[m
[31m-[m
[31m-    // Create 2nd todo.[m
[31m-    await newTodo.fill(TODO_ITEMS[1]);[m
[31m-    await newTodo.press('Enter');[m
[31m-[m
[31m-    // Make sure the list now has two todo items.[m
[31m-    await expect(page.getByTestId('todo-title')).toHaveText([[m
[31m-      TODO_ITEMS[0],[m
[31m-      TODO_ITEMS[1][m
[31m-    ]);[m
[31m-[m
[31m-    await checkNumberOfTodosInLocalStorage(page, 2);[m
[31m-  });[m
[31m-[m
[31m-  test('should clear text input field when an item is added', async ({ page }) => {[m
[31m-    // create a new todo locator[m
[31m-    const newTodo = page.getByPlaceholder('What needs to be done?');[m
[31m-[m
[31m-    // Create one todo item.[m
[31m-    await newTodo.fill(TODO_ITEMS[0]);[m
[31m-    await newTodo.press('Enter');[m
[31m-[m
[31m-    // Check that input is empty.[m
[31m-    await expect(newTodo).toBeEmpty();[m
[31m-    await checkNumberOfTodosInLocalStorage(page, 1);[m
[31m-  });[m
[31m-[m
[31m-  test('should append new items to the bottom of the list', async ({ page }) => {[m
[31m-    // Create 3 items.[m
[31m-    await createDefaultTodos(page);[m
[31m-[m
[31m-    // create a todo count locator[m
[31m-    const todoCount = page.getByTestId('todo-count')[m
[31m-  [m
[31m-    // Check test using different methods.[m
[31m-    await expect(page.getByText('3 items left')).toBeVisible();[m
[31m-    await expect(todoCount).toHaveText('3 items left');[m
[31m-    await expect(todoCount).toContainText('3');[m
[31m-    await expect(todoCount).toHaveText(/3/);[m
[31m-[m
[31m-    // Check all items in one call.[m
[31m-    await expect(page.getByTestId('todo-title')).toHaveText(TODO_ITEMS);[m
[31m-    await checkNumberOfTodosInLocalStorage(page, 3);[m
[31m-  });[m
[31m-});[m
[31m-[m
[31m-test.describe('Mark all as completed', () => {[m
[31m-  test.beforeEach(async ({ page }) => {[m
[31m-    await createDefaultTodos(page);[m
[31m-    await checkNumberOfTodosInLocalStorage(page, 3);[m
[31m-  });[m
[31m-[m
[31m-  test.afterEach(async ({ page }) => {[m
[31m-    await checkNumberOfTodosInLocalStorage(page, 3);[m
[31m-  });[m
[31m-[m
[31m-  test('should allow me to mark all items as completed', async ({ page }) => {[m
[31m-    // Complete all todos.[m
[31m-    await page.getByLabel('Mark all as complete').check();[m
[31m-[m
[31m-    // Ensure all todos have 'completed' class.[m
[31m-    await expect(page.getByTestId('todo-item')).toHaveClass(['completed', 'completed', 'completed']);[m
[31m-    await checkNumberOfCompletedTodosInLocalStorage(page, 3);[m
[31m-  });[m
[31m-[m
[31m-  test('should allow me to clear the complete state of all items', async ({ page }) => {[m
[31m-    const toggleAll = page.getByLabel('Mark all as complete');[m
[31m-    // Check and then immediately uncheck.[m
[31m-    await toggleAll.check();[m
[31m-    await toggleAll.uncheck();[m
[31m-[m
[31m-    // Should be no completed classes.[m
[31m-    await expect(page.getByTestId('todo-item')).toHaveClass(['', '', '']);[m
[31m-  });[m
[31m-[m
[31m-  test('complete all checkbox should update state when items are completed / cleared', async ({ page }) => {[m
[31m-    const toggleAll = page.getByLabel('Mark all as complete');[m
[31m-    await toggleAll.check();[m
[31m-    await expect(toggleAll).toBeChecked();[m
[31m-    await checkNumberOfCompletedTodosInLocalStorage(page, 3);[m
[31m-[m
[31m-    // Uncheck first todo.[m
[31m-    const firstTodo = page.getByTestId('todo-item').nth(0);[m
[31m-    await firstTodo.getByRole('checkbox').uncheck();[m
[31m-[m
[31m-    // Reuse toggleAll locator and make sure its not checked.[m
[31m-    await expect(toggleAll).not.toBeChecked();[m
[31m-[m
[31m-    await firstTodo.getByRole('checkbox').check();[m
[31m-    await checkNumberOfCompletedTodosInLocalStorage(page, 3);[m
[31m-[m
[31m-    // Assert the toggle all is checked again.[m
[31m-    await expect(toggleAll).toBeChecked();[m
[31m-  });[m
[31m-});[m
[31m-[m
[31m-test.describe('Item', () => {[m
[31m-[m
[31m-  test('should allow me to mark items as complete', async ({ page }) => {[m
[31m-    // create a new todo locator[m
[31m-    const newTodo = page.getByPlaceholder('What needs to be done?');[m
[31m-[m
[31m-    // Create two items.[m
[31m-    for (const item of TODO_ITEMS.slice(0, 2)) {[m
[31m-      await newTodo.fill(item);[m
[31m-      await newTodo.press('Enter');[m
[31m-    }[m
[31m-[m
[31m-    // Check first item.[m
[31m-    const firstTodo = page.getByTestId('todo-item').nth(0);[m
[31m-    await firstTodo.getByRole('checkbox').check();[m
[31m-    await expect(firstTodo).toHaveClass('completed');[m
[31m-[m
[31m-    // Check second item.[m
[31m-    const secondTodo = page.getByTestId('todo-item').nth(1);[m
[31m-    await expect(secondTodo).not.toHaveClass('completed');[m
[31m-    await secondTodo.getByRole('checkbox').check();[m
[31m-[m
[31m-    // Assert completed class.[m
[31m-    await expect(firstTodo).toHaveClass('completed');[m
[31m-    await expect(secondTodo).toHaveClass('completed');[m
[31m-  });[m
[31m-[m
[31m-  test('should allow me to un-mark items as complete', async ({ page }) => {[m
[31m-    // create a new todo locator[m
[31m-    const newTodo = page.getByPlaceholder('What needs to be done?');[m
[31m-[m
[31m-    // Create two items.[m
[31m-    for (const item of TODO_ITEMS.slice(0, 2)) {[m
[31m-      await newTodo.fill(item);[m
[31m-      await newTodo.press('Enter');[m
[31m-    }[m
[31m-[m
[31m-    const firstTodo = page.getByTestId('todo-item').nth(0);[m
[31m-    const secondTodo = page.getByTestId('todo-item').nth(1);[m
[31m-    const firstTodoCheckbox = firstTodo.getByRole('checkbox');[m
[31m-[m
[31m-    await firstTodoCheckbox.check();[m
[31m-    await expect(firstTodo).toHaveClass('completed');[m
[31m-    await expect(secondTodo).not.toHaveClass('completed');[m
[31m-    await checkNumberOfCompletedTodosInLocalStorage(page, 1);[m
[31m-[m
[31m-    await firstTodoCheckbox.uncheck();[m
[31m-    await expect(firstTodo).not.toHaveClass('completed');[m
[31m-    await expect(secondTodo).not.toHaveClass('completed');[m
[31m-    await checkNumberOfCompletedTodosInLocalStorage(page, 0);[m
[31m-  });[m
[31m-[m
[31m-  test('should allow me to edit an item', async ({ page }) => {[m
[31m-    await createDefaultTodos(page);[m
[31m-[m
[31m-    const todoItems = page.getByTestId('todo-item');[m
[31m-    const secondTodo = todoItems.nth(1);[m
[31m-    await secondTodo.dblclick();[m
[31m-    await expect(secondTodo.getByRole('textbox', { name: 'Edit' })).toHaveValue(TODO_ITEMS[1]);[m
[31m-    await secondTodo.getByRole('textbox', { name: 'Edit' }).fill('buy some sausages');[m
[31m-    await secondTodo.getByRole('textbox', { name: 'Edit' }).press('Enter');[m
[31m-[m
[31m-    // Explicitly assert the new text value.[m
[31m-    await expect(todoItems).toHaveText([[m
[31m-      TODO_ITEMS[0],[m
[31m-      'buy some sausages',[m
[31m-      TODO_ITEMS[2][m
[31m-    ]);[m
[31m-    await checkTodosInLocalStorage(page, 'buy some sausages');[m
[31m-  });[m
[31m-});[m
[31m-[m
[31m-test.describe('Editing', () => {[m
[31m-  test.beforeEach(async ({ page }) => {[m
[31m-    await createDefaultTodos(page);[m
[31m-    await checkNumberOfTodosInLocalStorage(page, 3);[m
[31m-  });[m
[31m-[m
[31m-  test('should hide other controls when editing', async ({ page }) => {[m
[31m-    const todoItem = page.getByTestId('todo-item').nth(1);[m
[31m-    await todoItem.dblclick();[m
[31m-    await expect(todoItem.getByRole('checkbox')).not.toBeVisible();[m
[31m-    await expect(todoItem.locator('label', {[m
[31m-      hasText: TODO_ITEMS[1],[m
[31m-    })).not.toBeVisible();[m
[31m-    await checkNumberOfTodosInLocalStorage(page, 3);[m
[31m-  });[m
[31m-[m
[31m-  test('should save edits on blur', async ({ page }) => {[m
[31m-    const todoItems = page.getByTestId('todo-item');[m
[31m-    await todoItems.nth(1).dblclick();[m
[31m-    await todoItems.nth(1).getByRole('textbox', { name: 'Edit' }).fill('buy some sausages');[m
[31m-    await todoItems.nth(1).getByRole('textbox', { name: 'Edit' }).dispatchEvent('blur');[m
[31m-[m
[31m-    await expect(todoItems).toHaveText([[m
[31m-      TODO_ITEMS[0],[m
[31m-      'buy some sausages',[m
[31m-      TODO_ITEMS[2],[m
[31m-    ]);[m
[31m-    await checkTodosInLocalStorage(page, 'buy some sausages');[m
[31m-  });[m
[31m-[m
[31m-  test('should trim entered text', async ({ page }) => {[m
[31m-    const todoItems = page.getByTestId('todo-item');[m
[31m-    await todoItems.nth(1).dblclick();[m
[31m-    await todoItems.nth(1).getByRole('textbox', { name: 'Edit' }).fill('    buy some sausages    ');[m
[31m-    await todoItems.nth(1).getByRole('textbox', { name: 'Edit' }).press('Enter');[m
[31m-[m
[31m-    await expect(todoItems).toHaveText([[m
[31m-      TODO_ITEMS[0],[m
[31m-      'buy some sausages',[m
[31m-      TODO_ITEMS[2],[m
[31m-    ]);[m
[31m-    await checkTodosInLocalStorage(page, 'buy some sausages');[m
[31m-  });[m
[31m-[m
[31m-  test('should remove the item if an empty text string was entered', async ({ page }) => {[m
[31m-    const todoItems = page.getByTestId('todo-item');[m
[31m-    await todoItems.nth(1).dblclick();[m
[31m-    await todoItems.nth(1).getByRole('textbox', { name: 'Edit' }).fill('');[m
[31m-    await todoItems.nth(1).getByRole('textbox', { name: 'Edit' }).press('Enter');[m
[31m-[m
[31m-    await expect(todoItems).toHaveText([[m
[31m-      TODO_ITEMS[0],[m
[31m-      TODO_ITEMS[2],[m
[31m-    ]);[m
[31m-  });[m
[31m-[m
[31m-  test('should cancel edits on escape', async ({ page }) => {[m
[31m-    const todoItems = page.getByTestId('todo-item');[m
[31m-    await todoItems.nth(1).dblclick();[m
[31m-    await todoItems.nth(1).getByRole('textbox', { name: 'Edit' }).fill('buy some sausages');[m
[31m-    await todoItems.nth(1).getByRole('textbox', { name: 'Edit' }).press('Escape');[m
[31m-    await expect(todoItems).toHaveText(TODO_ITEMS);[m
[31m-  });[m
[31m-});[m
[31m-[m
[31m-test.describe('Counter', () => {[m
[31m-  test('should display the current number of todo items', async ({ page }) => {[m
[31m-    // create a new todo locator[m
[31m-    const newTodo = page.getByPlaceholder('What needs to be done?');[m
[31m-    [m
[31m-    // create a todo count locator[m
[31m-    const todoCount = page.getByTestId('todo-count')[m
[31m-[m
[31m-    await newTodo.fill(TODO_ITEMS[0]);[m
[31m-    await newTodo.press('Enter');[m
[31m-[m
[31m-    await expect(todoCount).toContainText('1');[m
[31m-[m
[31m-    await newTodo.fill(TODO_ITEMS[1]);[m
[31m-    await newTodo.press('Enter');[m
[31m-    await expect(todoCount).toContainText('2');[m
[31m-[m
[31m-    await checkNumberOfTodosInLocalStorage(page, 2);[m
[31m-  });[m
[31m-});[m
[31m-[m
[31m-test.describe('Clear completed button', () => {[m
[31m-  test.beforeEach(async ({ page }) => {[m
[31m-    await createDefaultTodos(page);[m
[31m-  });[m
[31m-[m
[31m-  test('should display the correct text', async ({ page }) => {[m
[31m-    await page.locator('.todo-list li .toggle').first().check();[m
[31m-    await expect(page.getByRole('button', { name: 'Clear completed' })).toBeVisible();[m
[31m-  });[m
[31m-[m
[31m-  test('should remove completed items when clicked', async ({ page }) => {[m
[31m-    const todoItems = page.getByTestId('todo-item');[m
[31m-    await todoItems.nth(1).getByRole('checkbox').check();[m
[31m-    await page.getByRole('button', { name: 'Clear completed' }).click();[m
[31m-    await expect(todoItems).toHaveCount(2);[m
[31m-    await expect(todoItems).toHaveText([TODO_ITEMS[0], TODO_ITEMS[2]]);[m
[31m-  });[m
[31m-[m
[31m-  test('should be hidden when there are no items that are completed', async ({ page }) => {[m
[31m-    await page.locator('.todo-list li .toggle').first().check();[m
[31m-    await page.getByRole('button', { name: 'Clear completed' }).click();[m
[31m-    await expect(page.getByRole('button', { name: 'Clear completed' })).toBeHidden();[m
[31m-  });[m
[31m-});[m
[31m-[m
[31m-test.describe('Persistence', () => {[m
[31m-  test('should persist its data', async ({ page }) => {[m
[31m-    // create a new todo locator[m
[31m-    const newTodo = page.getByPlaceholder('What needs to be done?');[m
[31m-[m
[31m-    for (const item of TODO_ITEMS.slice(0, 2)) {[m
[31m-      await newTodo.fill(item);[m
[31m-      await newTodo.press('Enter');[m
[31m-    }[m
[31m-[m
[31m-    const todoItems = page.getByTestId('todo-item');[m
[31m-    const firstTodoCheck = todoItems.nth(0).getByRole('checkbox');[m
[31m-    await firstTodoCheck.check();[m
[31m-    await expect(todoItems).toHaveText([TODO_ITEMS[0], TODO_ITEMS[1]]);[m
[31m-    await expect(firstTodoCheck).toBeChecked();[m
[31m-    await expect(todoItems).toHaveClass(['completed', '']);[m
[31m-[m
[31m-    // Ensure there is 1 completed item.[m
[31m-    await checkNumberOfCompletedTodosInLocalStorage(page, 1);[m
[31m-[m
[31m-    // Now reload.[m
[31m-    await page.reload();[m
[31m-    await expect(todoItems).toHaveText([TODO_ITEMS[0], TODO_ITEMS[1]]);[m
[31m-    await expect(firstTodoCheck).toBeChecked();[m
[31m-    await expect(todoItems).toHaveClass(['completed', '']);[m
[31m-  });[m
[31m-});[m
[31m-[m
[31m-test.describe('Routing', () => {[m
[31m-  test.beforeEach(async ({ page }) => {[m
[31m-    await createDefaultTodos(page);[m
[31m-    // make sure the app had a chance to save updated todos in storage[m
[31m-    // before navigating to a new view, otherwise the items can get lost :([m
[31m-    // in some frameworks like Durandal[m
[31m-    await checkTodosInLocalStorage(page, TODO_ITEMS[0]);[m
[31m-  });[m
[31m-[m
[31m-  test('should allow me to display active items', async ({ page }) => {[m
[31m-    const todoItem = page.getByTestId('todo-item');[m
[31m-    await page.getByTestId('todo-item').nth(1).getByRole('checkbox').check();[m
[31m-[m
[31m-    await checkNumberOfCompletedTodosInLocalStorage(page, 1);[m
[31m-    await page.getByRole('link', { name: 'Active' }).click();[m
[31m-    await expect(todoItem).toHaveCount(2);[m
[31m-    await expect(todoItem).toHaveText([TODO_ITEMS[0], TODO_ITEMS[2]]);[m
[31m-  });[m
[31m-[m
[31m-  test('should respect the back button', async ({ page }) => {[m
[31m-    const todoItem = page.getByTestId('todo-item'); [m
[31m-    await page.getByTestId('todo-item').nth(1).getByRole('checkbox').check();[m
[31m-[m
[31m-    await checkNumberOfCompletedTodosInLocalStorage(page, 1);[m
[31m-[m
[31m-    await test.step('Showing all items', async () => {[m
[31m-      await page.getByRole('link', { name: 'All' }).click();[m
[31m-      await expect(todoItem).toHaveCount(3);[m
[31m-    });[m
[31m-[m
[31m-    await test.step('Showing active items', async () => {[m
[31m-      await page.getByRole('link', { name: 'Active' }).click();[m
[31m-    });[m
[31m-[m
[31m-    await test.step('Showing completed items', async () => {[m
[31m-      await page.getByRole('link', { name: 'Completed' }).click();[m
[31m-    });[m
[31m-[m
[31m-    await expect(todoItem).toHaveCount(1);[m
[31m-    await page.goBack();[m
[31m-    await expect(todoItem).toHaveCount(2);[m
[31m-    await page.goBack();[m
[31m-    await expect(todoItem).toHaveCount(3);[m
[31m-  });[m
[31m-[m
[31m-  test('should allow me to display completed items', async ({ page }) => {[m
[31m-    await page.getByTestId('todo-item').nth(1).getByRole('checkbox').check();[m
[31m-    await checkNumberOfCompletedTodosInLocalStorage(page, 1);[m
[31m-    await page.getByRole('link', { name: 'Completed' }).click();[m
[31m-    await expect(page.getByTestId('todo-item')).toHaveCount(1);[m
[31m-  });[m
[31m-[m
[31m-  test('should allow me to display all items', async ({ page }) => {[m
[31m-    await page.getByTestId('todo-item').nth(1).getByRole('checkbox').check();[m
[31m-    await checkNumberOfCompletedTodosInLocalStorage(page, 1);[m
[31m-    await page.getByRole('link', { name: 'Active' }).click();[m
[31m-    await page.getByRole('link', { name: 'Completed' }).click();[m
[31m-    await page.getByRole('link', { name: 'All' }).click();[m
[31m-    await expect(page.getByTestId('todo-item')).toHaveCount(3);[m
[31m-  });[m
[31m-[m
[31m-  test('should highlight the currently applied filter', async ({ page }) => {[m
[31m-    await expect(page.getByRole('link', { name: 'All' })).toHaveClass('selected');[m
[31m-    [m
[31m-    //create locators for active and completed links[m
[31m-    const activeLink = page.getByRole('link', { name: 'Active' });[m
[31m-    const completedLink = page.getByRole('link', { name: 'Completed' });[m
[31m-    await activeLink.click();[m
[31m-[m
[31m-    // Page change - active items.[m
[31m-    await expect(activeLink).toHaveClass('selected');[m
[31m-    await completedLink.click();[m
[31m-[m
[31m-    // Page change - completed items.[m
[31m-    await expect(completedLink).toHaveClass('selected');[m
[31m-  });[m
[31m-});[m
[31m-[m
[31m-async function createDefaultTodos(page) {[m
[31m-  // create a new todo locator[m
[31m-  const newTodo = page.getByPlaceholder('What needs to be done?');[m
[31m-[m
[31m-  for (const item of TODO_ITEMS) {[m
[31m-    await newTodo.fill(item);[m
[31m-    await newTodo.press('Enter');[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-async function checkNumberOfTodosInLocalStorage(page: Page, expected: number) {[m
[31m-  return await page.waitForFunction(e => {[m
[31m-    return JSON.parse(localStorage['react-todos']).length === e;[m
[31m-  }, expected);[m
[31m-}[m
[31m-[m
[31m-async function checkNumberOfCompletedTodosInLocalStorage(page: Page, expected: number) {[m
[31m-  return await page.waitForFunction(e => {[m
[31m-    return JSON.parse(localStorage['react-todos']).filter((todo: any) => todo.completed).length === e;[m
[31m-  }, expected);[m
[31m-}[m
[31m-[m
[31m-async function checkTodosInLocalStorage(page: Page, title: string) {[m
[31m-  return await page.waitForFunction(t => {[m
[31m-    return JSON.p